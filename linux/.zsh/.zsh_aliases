# useful environment variables
export GIT_HOME="$HOME/repos/soIipsist"
# export RSYNC_PATH=""
export RSYNC_SERVER="home"

# sqlite variables
export SQLITE_DB="downloads.db"
export SQLITE_TABLE="downloads"

# tmux aliases
alias t='tmux attach || tmux new-session'
alias ta='tmux attach -t'
alias tn='tmux new-session'
alias tl='tmux list-sessions'
alias tk='tmux kill-server'

# general service control
alias sstart='sudo systemctl start'
alias sstop='sudo systemctl stop'
alias srestart='sudo systemctl restart'
alias sstatus='systemctl status'
alias senable='sudo systemctl enable'
alias sdisable='sudo systemctl disable'
alias sjournal='journalctl -u'
alias sjtail='journalctl -fu'

function git_pull_all() {
    local base_dir="${GIT_HOME:-.}"

    echo "Running git pull in each subdirectory of: $base_dir"

    find "$base_dir" -mindepth 1 -maxdepth 1 -type d | while read -r dir; do
        if [ -d "$dir/.git" ]; then
            echo ">>> Pulling in $dir"
            git -C "$dir" pull
        else
            echo "Skipping $dir â€” not a git repository."
        fi
    done
}

function sedit() {
    local service="$1"
    local conf="/etc/default/${service}.conf"

    if [[ -z "$service" ]]; then
        echo "Usage: sedit <service-name>"
        return 1
    fi

    if [[ -f "$conf" ]]; then
        sudo "${EDITOR:-nano}" "$conf"
    else
        sudo systemctl edit "$service"
    fi
}

function ssrestart() {
    local service_name="$1"

    if [[ -z "$service_name" ]]; then
        echo "Usage: ssrestart <service-name>"
        return 1
    fi

    if [[ ! -f "$service_name" ]]; then
        service_name="$GIT_DOTFILES_DIRECTORY/linux/.services/services/$service_name.conf"
    fi

    if [[ ! -f "$service_name" ]]; then
        echo "Error: Config file not found: $service_name"
        return 1
    fi

    source /usr/local/bin/restart_service "$service_name"
}

function mnt_vfat() {
    if [ $# -ne 2 ]; then
        echo "Usage: mnt_vfat <device> <mount_point>"
        return 1
    fi

    if [ ! -d "$2" ]; then
        sudo mkdir -p "$2"
    fi
    sudo mount -o uid=$(id -u),gid=$(id -g) "$1" "$2"
}

function mnt_exfat() {
    if [ $# -ne 2 ]; then
        echo "Usage: mnt_exfat <device> <mount_point>"
        return 1
    fi

    if [ ! -d "$2" ]; then
        sudo mkdir -p "$2"
    fi

    sudo mount -t exfat -o uid=$(id -u),gid=$(id -g) "$1" "$2"
}

function mnt_ntfs() {
    if [ $# -ne 2 ]; then
        echo "Usage: mnt_exfat <device> <mount_point>"
        return 1
    fi

    if [ ! -d "$2" ]; then
        sudo mkdir -p "$2"
    fi

    sudo mount -t ntfs-3g -o uid=$(id -u),gid=$(id -g) "$1" "$2"
}

function mnt_auto() {
    if [ $# -ne 2 ]; then
        echo "Usage: mnt_auto <device> <mount_point>"
        return 1
    fi

    device="$1"
    mount_point="$2"

    if [ ! -d "$mount_point" ]; then
        sudo mkdir -p "$mount_point"
    fi

    fstype=$(lsblk -no FSTYPE "$device")

    case "$fstype" in
    vfat)
        mnt_vfat "$device" "$mount_point"
        ;;
    exfat)
        mnt_exfat "$device" "$mount_point"
        ;;
    ntfs)
        mnt_ntfs "$device" "$mount_point"
        ;;
    *)
        echo "Unsupported or unknown filesystem: $fstype"
        return 2
        ;;
    esac
}

# function rsync_push() {
#     local local_path="$1"
#     local remote_path="${2:-$RSYNC_PATH}"
#     local server_alias="${3:-$RSYNC_SERVER}"

#     if [[ -z "$local_path" || -z "$server_alias" ]]; then
#         echo "Usage: rsync_push <local_path> [remote_path] [server_alias]"
#         return 1
#     fi

#     if [ -z "$remote_path" ]; then
#         remote_path="."
#     fi

#     rsync -avz --progress "$local_path" "${server_alias}:${remote_path}"
# }

function rsync_push() {

    # rsync_push <local_paths>
    # rsync_push <local_paths> [server_alias]
    # rsync_push <local_paths> [remote_path] [server_alias]
    # rsync_push <local_paths> [remote_path]

    if (($# < 1)); then
        echo "Usage: rsync_push <local_path1> [local_path2 ...] <remote_dir> [server_alias:$RSYNC_SERVER]"
        return 1
    fi

    local server_alias="$RSYNC_SERVER"
    local remote_dir="."
    local local_paths=()

    if (($# == 1)); then
        local_paths=("$1")
    else

        local last_arg="${@: -1}"
        local second_last="${@: -2:1}"

        if [ -e "$last_arg" ]; then # this exists, so it's not remote
            local_paths+=($last_arg)
            local_paths+=($second_last)

        else # this is remote or server alias
            if [[ "$last_arg" == /* || "$last_arg" == ./* || "$last_arg" == ../* || "$last_arg" == "~/"* || -d "$last_arg" || "$last_arg" == "~" ]]; then
                remote_dir="$last_arg"
            else
                server_alias="$last_arg"
            fi
        fi

        if [ -e "$second_last" ]; then # this exists, so it's not remote
            local_paths+=("$second_last")
        else
            remote_dir="$second_last"
        fi

        set -- "${@:1:$(($# - 2))}"

        local_paths+=("$@")

    fi

    if [[ -z "$server_alias" ]]; then
        echo "Error: server alias not provided and RSYNC_SERVER is not set."
        return 1
    fi

    if [ -z "$local_paths" ]; then
        echo "Error: no valid local paths provided."
        return 1
    fi

    # echo "LOCAL PATHS: ${local_paths[@]}"
    # echo "REMOTE: $remote_dir"
    # echo "SERVER: $server_alias"

    rsync -avz --progress "${local_paths[@]}" "${server_alias}:${remote_dir}"
}

function rsync_pull() {
    # rsync_pull <remote_paths>
    # rsync_pull <remote_paths> [server_alias]
    # rsync_pull <remote_paths> [local_path]
    # rsync_pull <remote_paths> [local_path] [server_alias]

    if (($# < 1)); then
        echo "Usage: rsync_pull <remote_path1> [remote_path2 ...] [local_dir] [server_alias:$RSYNC_SERVER]"
        return 1
    fi

    local server_alias="$RSYNC_SERVER"
    local local_dir="."
    local remote_paths=()

    if (($# == 1)); then
        remote_paths=("$1")
    else
        local last_arg="${@: -1}"
        local second_last="${@: -2:1}"

        echo $last_arg $second_last

        # is remote path or local path
        if [[ "$last_arg" == /* || "$last_arg" == ./* || "$last_arg" == ../* || "$last_arg" == "~/"* || -d "$last_arg" ]]; then

            if [ -e "$last_arg" ]; then # this is local
                local_dir="$last_arg"
                remote_paths+=("$second_last")

            else # add all remaining args as remote paths
                remote_paths+=("$last_arg")
                remote_paths+=("$second_last")
            fi
        else
            # is server alias
            server_alias="$last_arg"

            if [ -e "$second_last" ]; then # this is local
                local_dir="$second_last"
            else # add all remaining args as remote paths
                remote_paths+=("$second_last")
            fi
        fi

        set -- "${@:1:$(($# - 2))}"

        remote_paths+=("$@")
    fi

    if [[ -z "$server_alias" ]]; then
        echo "Error: server alias not provided and RSYNC_SERVER is not set."
        return 1
    fi

    if [ -z "$remote_paths" ]; then
        echo "Error: no valid remote paths provided."
        return 1
    fi

    echo "REMOTE: ${remote_paths[@]}"
    echo "LOCAL: $local_dir"
    echo "SERVER: $server_alias"
    # rsync -avz --progress "${remote_paths[@]}" "$local_dir"

}

# venv scripts

function sqliteq() {
    run_venv_script "sqlite.py" "$@"
}

function organize_files() {
    run_venv_script "organize_files.py" "$@"
}
