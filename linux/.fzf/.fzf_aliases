export FZF_DEFAULT_OPTS="--color=query:#ff8700"
export FZF_FAVORITES="$HOME/.fzf_favorites"

# open fzf in edit mode
fzfe() {
  local dir="${1:-.}"
  dir=$(cd "$dir" && pwd -P)
  local selection

  selection=$(
    find . -type f -o -type d | fzf \
      --multi \
      --bind "ctrl-w:reload(find \"$(dirname "$dir")\" -type f -o -type d)+change-prompt(cwd: $(dirname "$dir") )" \
      --bind "ctrl-s:toggle+down" \
      --bind 'ctrl-x:execute(
        bash -c "
          echo -n \"Delete selected files? (y/n): \";
          read -r answer < /dev/tty;
          if [[ \$answer == [Yy]* ]]; then
            for f in \"\$@\"; do
              rm -rf -- \"\$f\" || echo \"Failed to delete \$f\";
            done
            echo \"Deletion complete.\";
          else
            echo \"Aborted deletion.\";
          fi
        " bash {+}
      )+reload(find . \( -type f -o -type d \) )'
  )

  if [ -n $selection ]; then
    if [ -f $selection ]; then
      z "$(dirname "$selection")"
    else
      z "$selection"
    fi
  fi
}

# open fzf in code mode
fzfc() {
  local cwd="${1:-.}"
  local selection file line col
  local default_editor="${DEFAULT_EDITOR:-vim}"

  selection=$(rg --glob '!.git/*' \
    --column --hidden --line-number --no-heading --color=always "" "$cwd" |
    fzf --ansi --tiebreak=length --delimiter=: \
      --preview='batcat --style=numbers --color=always --highlight-line {2} {1}')

  [ -z "$selection" ] && return 1

  IFS=: read -r file line col _rest <<<"$selection"

  case "$default_editor" in
  vscode | code)
    code -g "$file:$line:$col"
    ;;
  vim)
    vim "+call cursor($line, $col)" "$file"
    ;;
  *)
    nano "+${line}" "$file"
    ;;
  esac
}

fzfh() {
  local history_path="${1:-$HISTFILE}"
  local change_header="${2:-1}"
  local fzf_favorites="${FZF_FAVORITES:-$HOME/.fzf_favorites}"

  if [[ ! -f $history_path ]]; then
    echo "History file not found: $history_path" >&2
    return 1
  fi

  local normal_header="Press Ctrl-F to save selected commands to favorites"
  local saved_header="✔ Saved to favorites"
  local deleted_header="✔ Commands deleted"

  local selection

  if [[ $change_header -eq 1 ]]; then
    selection=$(
      awk '!seen[$0]++' "$history_path" | fzf \
        --multi \
        --tac \
        --height=60% --border --prompt="History> " \
        --header="$normal_header" \
        --bind "ctrl-s:toggle+down" \
        --bind "ctrl-f:execute-silent(echo {+} >> \"$fzf_favorites\")+transform-header:echo '$saved_header'" \
        --bind "ctrl-x:execute(
        sh -c '\
          read -p \"Delete selected commands? (y/N): \" answer < /dev/tty; \
          [[ \"\$answer\" =~ ^[Yy] ]] || exit 0; \
          for cmd in \"\$@\"; do \
            echo \"CMD: \$cmd\" >> /tmp/.info
            echo \"SED: sed \"/^\$cmd\$/d\"\" >> /tmp/.info
            echo \"ARGS: \"\$@\"\" >> /tmp/.info
            grep -Fxv \"\$cmd\" \"$history_path\" > \"$history_path.tmp\" && mv \"$history_path.tmp\" \"$history_path\"

          done' sh {+}
      )+transform-header(echo '$deleted_header')+reload(awk '!seen[\$0]++' \"$history_path\")" \
        --bind "focus:transform-header:echo '$normal_header'"
    )
  else
    selection=$(awk '!seen[$0]++' "$history_path" | fzf --multi --tac --height=60% --border --prompt="History> ")
  fi

  [[ -z $selection ]] && {
    echo "No selection made." >&2
    return 1
  }

  local last_cmd
  last_cmd=$(echo "$selection" | tail -n 1)

  if [[ -n $ZSH_VERSION ]]; then
    print -z -- "$last_cmd"
  else
    history -s "$last_cmd"
  fi
}

fzff() {
  if [ -z "$FZF_FAVORITES" ]; then
    FZF_FAVORITES="$HOME/.fzf_favorites"
  fi

  if [ ! -f "$FZF_FAVORITES" ]; then
    touch "$FZF_FAVORITES"
    echo "Created $FZF_FAVORITES"
  fi

  fzfh "$FZF_FAVORITES" 0
}

fzfg() {
  local cwd="${1:-.}"
  local selection file first_line
  local default_editor="${DEFAULT_EDITOR:-code}"

  cd "$cwd" || return
  local repo_root
  repo_root=$(git rev-parse --show-toplevel) || return

  selection=$(git status --porcelain | fzf --ansi --preview '
        file=$(echo {} | cut -c4- | sed "s/.* -> //" | sed "s/^\"//; s/\"$//")
        if [ -n "$file" ] && [ -f "'"$repo_root"'/$file" ]; then
            git -C "'"$repo_root"'" diff --color=always -- "$file" || batcat --style=numbers --color=always "'"$repo_root"'/$file"
        fi
    ')

  [ -z "$selection" ] && return

  file=$(echo "$selection" | cut -c4- | sed 's/.* -> //' | sed 's/^"//; s/"$//')

  file="$repo_root/$file"

  first_line=$(git -C "$repo_root" diff --unified=0 -- "$file" | grep -m1 '^@@' | sed -E 's/^@@ -[0-9,]+ \+([0-9]+).*/\1/')
  [ -z "$first_line" ] && first_line=1

  case "$default_editor" in
  vscode | code)
    code -g "$file:$first_line"
    ;;
  vim)
    vim "+$first_line" "$file"
    ;;
  *)
    nano "+$first_line" "$file"
    ;;
  esac
}
