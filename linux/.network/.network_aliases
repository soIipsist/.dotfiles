export DUMPS_DIR="$HOME/.dumps"

ssh_dump() {
    local interface="${1:-any}"
    local dumps_filename="${2:-ssh_dump.pcap}"
    local outfile_path="$DUMPS_DIR/$dumps_filename"

    mkdir -p "$DUMPS_DIR"

    sudo tcpdump -i "$interface" -w "$outfile_path" -v '(tcp port 22 or tcp port 2222) and tcp[tcpflags] & tcp-syn != 0'
}

detect_bruteforce() {
    local LOG="/var/log/auth.log"
    local SAMPLE=5
    local PATTERN='failed password|invalid user|authentication failure|pam:|invalid login|connection reset|did not receive identification|refused connect|authentication error|illegal user'
    local ip_re='([0-9]{1,3}\.){3}[0-9]{1,3}'

    if [[ ! -r "$LOG" ]]; then
        echo "Cannot read $LOG. Run as root or check the file path." >&2
        return 1
    fi

    echo "Scanning $LOG for patterns..."
    tmp="$(mktemp)"
    trap 'rm -f "$tmp"' EXIT
    grep -Ei "$PATTERN" "$LOG" >"$tmp" || true

    if [[ ! -s "$tmp" ]]; then
        echo "No matching failed-auth lines found."
        return 0
    fi

    echo
    printf "%-17s %8s %s\n" "IP" "ATTEMPTS" "FIRST_LINE"
    echo "--------------------------------------------------------------------"

    # Use grep -Eo to extract IPv4; some lines may not contain an IP and are handled below
    while read -r count ip; do
        # For each IP, show first and last lines (raw), plus sample lines header later
        first_line="$(grep -F "$ip" "$tmp" | head -n1)"
        last_line="$(grep -F "$ip" "$tmp" | tail -n1)"
        printf "%-17s %8s %s\n" "$ip" "$count" "${first_line:--}"
    done < <(grep -Eo "$ip_re" "$tmp" | sort | uniq -c | sort -nr | awk '{print $1, $2}')

    # Report lines without IPv4
    noip_count="$(grep -Eiv "$ip_re" "$tmp" | wc -l | tr -d '[:space:]')"
    if [[ "$noip_count" -gt 0 ]]; then
        printf "%-17s %8s %s\n" "NO_IP" "$noip_count" "-"
    fi

    # Print sample lines for top IPs (limit to top 20 to avoid huge output)
    echo
    echo "Sample lines (up to $SAMPLE per IP) â€” top IPs first:"
    echo "--------------------------------------------------------------------"

    TOPN=20
    ip_index=0
    while read -r _ ip; do
        ((ip_index++))
        [[ $ip_index -gt $TOPN ]] && break
        echo
        echo "--- $ip ---"
        grep -F "$ip" "$tmp" | head -n "$SAMPLE"
    done < <(grep -Eo "$ip_re" "$tmp" | sort | uniq -c | sort -nr | awk '{print $1, $2}')

    if [[ "$noip_count" -gt 0 ]]; then
        echo
        echo "--- LINES WITHOUT AN IPv4 (first 10 shown) ---"
        grep -Eiv "$ip_re" "$tmp" | head -n 10
    fi

    return 0
}
