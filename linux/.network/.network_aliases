export DUMPS_DIR="$HOME/.dumps"

ssh_dump() {
    local interface="${1:-any}"
    local dumps_filename="${2:-ssh_dump.pcap}"
    local outfile_path="$DUMPS_DIR/$dumps_filename"

    mkdir -p "$DUMPS_DIR"

    sudo tcpdump -i "$interface" -w "$outfile_path" -v '(tcp port 22 or tcp port 2222) and tcp[tcpflags] & tcp-syn != 0'
}

detect_bruteforce() {
    local LOG="/var/log/auth.log"
    local SAMPLE=5

    if [[ ! -r "$LOG" ]]; then
        echo "Cannot read $LOG (permission or file missing). Run as root or check the path." >&2
        return 1
    fi

    grep -Ei 'failed password|invalid user|authentication failure|pam:|invalid login|connection reset|did not receive identification|refused connect|authentication error|illegal user' "$LOG" |
        awk -v sample="$SAMPLE" '
    BEGIN {
      ip_re = "([0-9]{1,3}\\.){3}[0-9]{1,3}"
      OFS = "|"
    }
    {
      line = $0
      # try to capture a leading syslog timestamp (e.g., "Oct 31 12:34:56")
      if (match(line, /^[A-Z][a-z]{2} [ 0-9][0-9] [0-9]{2}:[0-9]{2}:[0-9]{2}/)) {
        ts = substr(line, RSTART, RLENGTH)
      } else {
        ts = "-"
      }

      if (match(line, ip_re)) {
        ip = substr(line, RSTART, RLENGTH)
      } else {
        ip = "NO_IP"
      }

      cnt[ip]++
      if (!(ip in first)) first[ip] = ts
      last[ip] = ts

      if (samples_count[ip] < sample) {
        samples_count[ip]++
        samples[ip, samples_count[ip]] = line
      }
    }
    END {
      printf("%-17s %8s %20s %20s\n", "IP", "ATTEMPTS", "FIRST_SEEN", "LAST_SEEN")
      print "-----------------------------------------------------------------------"

      # sort IPs by attempt count desc (GNU awk asorti with @val_num_desc)
      n = asorti(cnt, idx, "@val_num_desc")
      for (i = 1; i <= n; i++) {
        ip = idx[i]
        printf("%-17s %8d %20s %20s\n", ip, cnt[ip], (first[ip]?first[ip]:"-"), (last[ip]?last[ip]:"-"))
      }

      print "\nSample lines (per IP):"
      for (i = 1; i <= n; i++) {
        ip = idx[i]
        print "\n--- " ip " ---"
        for (j = 1; j <= samples_count[ip]; j++) {
          print samples[ip, j]
        }
      }
    }
  '
}
