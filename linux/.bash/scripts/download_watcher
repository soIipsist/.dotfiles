#!/bin/bash

download() {
    SCRIPT_PATH="$SCRIPTS_DIRECTORY/downloader.py"

    if [ ! -f "$SCRIPT_PATH" ]; then
        echo "Could not find $SCRIPT_PATH."
        return
    fi

    if [ -n "$VENV_PATH" ]; then
        source $VENV_PATH/bin/activate
    fi

    # start a new tmux session or attach to already existing

    if tmux has-session -t downloads 2>/dev/null; then
        # Session exists: create a new window to run the script
        tmux new-window -t downloads -n "dl-$(date +%s)" "python3 \"$SCRIPT_PATH\" \"$@\""
        tmux select-window -t downloads:!
    else
        echo "Starting tmux session." >>"$LOG_FILE"
        tmux new-session -s downloads -n "dl" "python3 \"$SCRIPT_PATH\" \"$@\""
    fi

    echo "$(date): Completed download: $@" >>"$LOG_FILE"

    # Deactivate the virtual environment properly
    if [ -n "$VIRTUAL_ENV" ]; then
        deactivate
    fi
}

check_required_file() {
    file_path="$1"
    clean="${2:-1}" # Default to 1 if not provided

    if [ ! -f "$file_path" ]; then
        echo "Required file not found: $file_path"
        exit 1
    fi

    if [ "$clean" -eq 1 ]; then
        : >"$file_path"
    fi
}

# ensure required env vars are set
if [ -z "$DOWNLOADS_PATH" ] || [ -z "$LOG_FILE" ] || [ -z "$STATE_FILE" ] || [ -z "$ERR_FILE" ]; then
    echo "Missing environment variables: DOWNLOADS_PATH, LOG_FILE, or STATE_FILE."
    exit 1
fi

# ensure files exist
check_required_file "$DOWNLOADS_PATH" 0
check_required_file "$LOG_FILE"
check_required_file "$ERR_FILE"
check_required_file "$STATE_FILE"

# create initial state
cp "$DOWNLOADS_PATH" "$STATE_FILE"

while true; do
    inotifywait -e modify "$DOWNLOADS_PATH"

    if [ ! -s "$DOWNLOADS_PATH" ]; then
        echo "$(date): File was modified but is empty, skipping." >>"$LOG_FILE"
        cp "$DOWNLOADS_PATH" "$STATE_FILE"
        continue
    fi

    echo "$(date): File changed - $DOWNLOADS_PATH" >>"$LOG_FILE"

    # changed lines in downloads.txt
    NEW_LINES=$(comm -13 <(sort "$STATE_FILE") <(sort "$DOWNLOADS_PATH"))

    while IFS= read -r line; do
        if [[ -n "$line" ]]; then
            echo "$(date): Running download on: $line $DOWNLOADS_PATH" >>"$LOG_FILE"
            download "$line"
        fi
    done <<<"$NEW_LINES"

    cp "$DOWNLOADS_PATH" "$STATE_FILE"
done
